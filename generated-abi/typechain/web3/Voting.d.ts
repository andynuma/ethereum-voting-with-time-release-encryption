/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class Voting extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): Voting;
  methods: {
    ballots(arg0: number | string): TransactionObject<string>;

    end(): TransactionObject<boolean>;

    inspectorAddress(): TransactionObject<string>;

    ownerAddress(): TransactionObject<string>;

    testArray(arg0: number | string): TransactionObject<string>;

    testWord(): TransactionObject<string>;

    value(): TransactionObject<string>;

    voteCount(arg0: string): TransactionObject<string>;

    voterAddressArray(arg0: number | string): TransactionObject<string>;

    votes(arg0: string): TransactionObject<string>;

    setVoterAddress(_voterAddress: string): TransactionObject<void>;

    setInspectorAddress(_inspectorAddress: string): TransactionObject<void>;

    setVote(_vote: string, _rP: string): TransactionObject<void>;

    endVoting(): TransactionObject<void>;

    getEndSign(): TransactionObject<boolean>;

    viewResult(): TransactionObject<string[]>;

    setValue(_value: number | string): TransactionObject<void>;

    getValue(): TransactionObject<string>;

    testSetWord(_word: string): TransactionObject<void>;

    testGetArray(): TransactionObject<string[]>;

    toAsciiString(x: string): TransactionObject<string>;

    char(b: string | number[]): TransactionObject<string>;

    strConnect(_a: string, _b: string): TransactionObject<string>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
